#include <stdio.h>
#include <stdlib.h>

int _putchar(char c) {
  return putchar(c);
}

int _islower(int c) {
  return c >= 'a' && c <= 'z';
}

int _isalpha(int c) {
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

int _abs(int n) {
  return n < 0 ? -n : n;
}

int _isupper(int c) {
  return c >= 'A' && c <= 'Z';
}

int _isdigit(int c) {
  return c >= '0' && c <= '9';
}

int _strlen(char *s) {
  int len = 0;
  while (*s != '\0') {
    len++;
    s++;
  }
  return len;
}

void _puts(char *s) {
  puts(s);
}

char *_strcpy(char *dest, char *src) {
  char *ptr = dest;
  while (*src != '\0') {
    *dest = *src;
    dest++;
    src++;
  }
  *dest = '\0';
  return ptr;
}

int _atoi(char *s) {
  int n = 0;
  int sign = 1;
  if (*s == '-') {
    sign = -1;
    s++;
  }
  while (*s != '\0') {
    n = n * 10 + (*s - '0');
    s++;
  }
  return n * sign;
}

char *_strcat(char *dest, char *src) {
  char *ptr = dest;
  while (*dest != '\0') {
    dest++;
  }
  while (*src != '\0') {
    *dest = *src;
    dest++;
    src++;
  }
  *dest = '\0';
  return ptr;
}

char *_strncat(char *dest, char *src, int n) {
  char *ptr = dest;
  while (*dest != '\0') {
    dest++;
  }
  for (int i = 0; i < n; i++) {
    if (*src == '\0') {
      break;
    }
    *dest = *src;
    dest++;
    src++;
  }
  *dest = '\0';
  return ptr;
}

char *_strncpy(char *dest, char *src, int n) {
  char *ptr = dest;
  for (int i = 0; i < n; i++) {
    *dest = *src;
    dest++;
    src++;
  }
  *dest = '\0';
  return ptr;
}

int _strcmp(char *s1, char *s2) {
  while (*s1 == *s2) {
    if (*s1 == '\0') {
      return 0;
    }
    s1++;
    s2++;
  }
  return *s1 - *s2;
}

char *_memset(char *s, char b, unsigned int n) {
  for (unsigned int i = 0; i < n; i++) {
    *s = b;
    s++;
  }
  return s;
}

char *_memcpy(char *dest, char *src, unsigned int n) {
  for (unsigned int i = 0; i < n; i++) {
    *dest = *src;
    dest++;
    src++;
  }
  return dest;
}

char *_strchr(char *s, char c) {
  while (*s != '\0') {
    if (*s == c) {
      return s;
    }
    s++;
  }
  return NULL;
}
